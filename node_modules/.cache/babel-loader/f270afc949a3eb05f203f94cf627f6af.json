{"ast":null,"code":"var _jsxFileName = \"/home/ellocent/Desktop/Todoapp/todolist/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Form from \"./comp/Form\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { nanoid } from \"nanoid\";\nimport FilterButton from \"./comp/FilterButton\";\nimport Todo from \"./comp/Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"All\");\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this));\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [tasks.length, \" task Remaining\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeZuGOM5z5o7WHkJMnH9Om8aBlo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ellocent/Desktop/Todoapp/todolist/src/App.js"],"names":["Form","React","useState","nanoid","FilterButton","Todo","App","props","tasks","setTasks","filter","setFilter","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","toggleTaskCompleted","id","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","name","taskList","filterList","addTask","newTask","length"],"mappings":";;;AAAA,OAAOA,IAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,IAAcC,QAAd,QAA4B,OAA5B;AACA,OAAO,WAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;;AAKA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AAGA,QAAMU,UAAU,GAAG;AACjBC,IAAAA,GAAG,EAAE,MAAM,IADM;AAEjBC,IAAAA,MAAM,EAAGC,IAAD,IAAU,CAACA,IAAI,CAACC,SAFP;AAGjBC,IAAAA,SAAS,EAAGF,IAAD,IAAUA,IAAI,CAACC;AAHT,GAAnB;AAMA,QAAME,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYR,UAAZ,CAArB;;AAEA,WAASS,mBAAT,CAA6BC,EAA7B,EAAiC;AAC/B,UAAMC,YAAY,GAAGf,KAAK,CAACgB,GAAN,CAAWT,IAAD,IAAU;AAEvC,UAAIO,EAAE,KAAKP,IAAI,CAACO,EAAhB,EAAoB;AAElB,eAAO,EAAE,GAAGP,IAAL;AAAWC,UAAAA,SAAS,EAAE,CAACD,IAAI,CAACC;AAA5B,SAAP;AACD;;AACD,aAAOD,IAAP;AACD,KAPoB,CAArB;AAQAN,IAAAA,QAAQ,CAACc,YAAD,CAAR;AACD;;AAED,WAASE,UAAT,CAAoBH,EAApB,EAAwB;AACtB,UAAMI,cAAc,GAAGlB,KAAK,CAACE,MAAN,CAAcK,IAAD,IAAUO,EAAE,KAAKP,IAAI,CAACO,EAAnC,CAAvB;AACAb,IAAAA,QAAQ,CAACiB,cAAD,CAAR;AACD;;AAED,WAASC,QAAT,CAAkBL,EAAlB,EAAsBM,OAAtB,EAA+B;AAC7B,UAAMC,cAAc,GAAGrB,KAAK,CAACgB,GAAN,CAAWT,IAAD,IAAU;AACzC,UAAIO,EAAE,KAAKP,IAAI,CAACO,EAAhB,EAAoB;AAClB,eAAO,EAAE,GAAGP,IAAL;AAAWe,UAAAA,IAAI,EAAEF;AAAjB,SAAP;AACD;;AACD,aAAOb,IAAP;AACD,KALsB,CAAvB;AAMAN,IAAAA,QAAQ,CAACoB,cAAD,CAAR;AACD;;AAGD,QAAME,QAAQ,GAAGvB,KAAK,CACrBE,MADgB,CACTE,UAAU,CAACF,MAAD,CADD,EAEhBc,GAFgB,CAEXT,IAAD,iBACH,QAAC,IAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACO,EADX;AAEE,IAAA,IAAI,EAAEP,IAAI,CAACe,IAFb;AAGE,IAAA,SAAS,EAAEf,IAAI,CAACC,SAHlB;AAKE,IAAA,mBAAmB,EAAEK,mBALvB;AAME,IAAA,UAAU,EAAEI,UANd;AAOE,IAAA,QAAQ,EAAEE;AAPZ,KAIOZ,IAAI,CAACO,EAJZ;AAAA;AAAA;AAAA;AAAA,UAHe,CAAjB;AAcA,QAAMU,UAAU,GAAGd,YAAY,CAACM,GAAb,CAAkBM,IAAD,iBAClC,QAAC,YAAD;AAEE,IAAA,IAAI,EAAEA,IAFR;AAGE,IAAA,SAAS,EAAEA,IAAI,KAAKpB,MAHtB;AAIE,IAAA,SAAS,EAAEC;AAJb,KACOmB,IADP;AAAA;AAAA;AAAA;AAAA,UADiB,CAAnB;;AASA,WAASG,OAAT,CAAiBH,IAAjB,EAAuB;AACrB,UAAMI,OAAO,GACb;AACEZ,MAAAA,EAAE,EAAE,UAAUnB,MAAM,EADtB;AAEE2B,MAAAA,IAAI,EAAEA,IAFR;AAGEd,MAAAA,SAAS,EAAE;AAHb,KADA;AAMAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW0B,OAAX,CAAD,CAAR;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAED;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,iBAAKxB,KAAK,CAAC2B,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,gBAAKJ;AAAL;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAlFQzB,G;;KAAAA,G;AAoFT,eAAeA,GAAf","sourcesContent":["import Form from\"./comp/Form\";\nimport React,{useState} from'react';\nimport './App.css';\nimport { nanoid } from \"nanoid\";\nimport FilterButton from \"./comp/FilterButton\";\nimport Todo from \"./comp/Todo\";\n\n\n\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"All\");\n\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: (task) => !task.completed,\n    Completed: (task) => task.completed,\n  };\n\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  \n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n     \n      if (id === task.id) {\n      \n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  \n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  }\n  \n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      if (id === task.id) {\n        return { ...task, name: newName };\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  \n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map((task) => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n \n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  function addTask(name) {\n    const newTask = \n    { \n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n   };\n    setTasks([...tasks, newTask]);\n  }\n\n  return (\n    <div>\n      <Form addTask={addTask} />\n      <div>{filterList}</div>\n      <h2>{tasks.length} task Remaining</h2>\n      <ul>{taskList}</ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}